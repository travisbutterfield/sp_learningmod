<?php

/**
 * @file
 * A custom learning module for managing Street Prostitution.
 */

/**
 * Implements hook_help().
 */
function sp_learningmod_help($path, $arg) {
  switch ($path) {
    case "admin/help#sp_learningmod":
      $output = t("<p>A custom learning module for managing Street Prostitution</p>");
      return $output;

    case 'admin/config/system/sp_learningmod':
      if (module_exists('help')) {
        $help_text = t('More help can be found at <a href=\"!help\">sp_learningmod help</a>.', array('!help' => url('admin/help/sp_learningmod')));
      }
      else {
        $help_text = '';
      }
      $output = "<p>" . t("A custom learning module for managing Street Prostitution") . " $help_text</p>";
      return $output;
  }
}

/*function sp_learningmod_user_view($account, $view_mode, $langcode) {
dpm($account);
}*/

/**
 * Implements hook_menu().
 */
function sp_learningmod_menu() {
  $items['learning/prostitution/plan/city-council-meeting'] = array(
    'title' => 'City Council Meeting',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sp_learningmod_quiz'),
    'access callback' => TRUE,
    'file' => 'councilmeeting.inc',
    'file path' => drupal_get_path('module', 'sp_learningmod'),
  );
  $items['learning/prostitution/plan/buildmyplan'] = array(
    'title' => 'Build My Plan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sp_learningmod_buildmyplan'),
    'access callback' => 'sp_learningmod_planaccess',
    'file' => 'buildmyplan.inc',
    'file path' => drupal_get_path('module', 'sp_learningmod'),
  );
  $items['learning/prostitution/plan/reviewmyplan'] = array(
    'title' => 'Review My Plan',
    'page callback' => array('sp_learningmod_reviewmyplan'),
    'access callback' => 'sp_learningmod_planaccess',
    'file' => 'reviewmyplan.inc',
    'file path' => drupal_get_path('module', 'sp_learningmod'),
  );
  $items['admin/config/sp-learningmod'] = array(
    'title' => 'Street Prostitution Learning Module Administrative Functions',
    'page callback' => array('sp_learningmod_admin'),
    'access callback' => 'sp_learningmod_adminaccess',
    'file' => 'admin.inc',
    'file path' => drupal_get_path('module', 'sp_learningmod'),
  );

  return $items;
}

/**
 * Access callback for Admin page.
 */
function sp_learningmod_adminaccess() {
  global $user;
  // Load full user account object.
  $account = user_load($user->uid);
  /*dpm($account);*/

  $role = user_role_load_by_name("administrator");
  if (user_has_role($role->rid)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Access callback for Plan pages.
 */
function sp_learningmod_planaccess() {
  global $user;
  // Load full user account object.
  $account = user_load($user->uid);
  /*dpm($account);*/

  $quizstatus = !empty($account->field_learnsp_quiz_status[LANGUAGE_NONE][0]['value']) ? $account->field_learnsp_quiz_status[LANGUAGE_NONE][0]['value'] : NULL;

  $sp_role = user_role_load_by_name("sp_learningmod user");

  if (user_has_role($sp_role->rid) && $quizstatus == 'pass') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_block_info().
 */
function sp_learningmod_block_info() {
  $blocks = array();
  $blocks['yearlater'] = array(
    'info' => t('SPLearningMod A Year Later'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['analysis'] = array(
    'info' => t('SPLearningMod Response Analysis'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['respmemo'] = array(
    'info' => t("SPLearningMod Mayor's Response"),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['beginmodule'] = array(
    'info' => t('SPLearningMod Begin button'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['idealplan'] = array(
    'info' => t('SPLearningMod Ideal Plan'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['critqbuttons'] = array(
    'info' => t('SPLearningMod Critical Questions Buttons'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

module_load_include('inc', 'sp_learningmod', 'blockdata');

/**
 * Implements hook_ctools_render_alter().
 */
function sp_learningmod_ctools_render_alter(&$info, &$page, &$context) {
  $data = array_values($context['contexts']);
  // Below is nothing but to call hook_node_view which force to pass the
  // node object.
  if ($node = menu_get_object()) {
    module_invoke_all('node_view', $data[0]->data, 'full', '');
  }
}

/**
 * Implements hook_init().
 */
function sp_learningmod_init() {
  if (current_path() == 'learning/prostitution/feedback/mayors-response') {
    drupal_page_is_cacheable(FALSE);
  }

  global $user;
  // Load full user account object.
  $account = user_load($user->uid);
  $accountid = $account->uid;
  $sp_submitted = isset($account->field_learnsp_submitted[LANGUAGE_NONE][0]['value']) ? $account->field_learnsp_submitted[LANGUAGE_NONE][0]['value'] : 'no';

  $sp_js = array(
    'spSubmitted' . $accountid => $sp_submitted,
  );

  drupal_add_js(array('sp_learningmod' => $sp_js), 'setting');

  $path = current_path();
  $prostpath = strstr(drupal_get_path_alias($path), 'learning/prostitution');
  if($prostpath) {
    drupal_add_js(drupal_get_path('module', 'sp_learningmod') .'/js/sp_learningmod.js', 'file');
    drupal_add_js(drupal_get_path('module', 'sp_learningmod') .'/js/sp_learningmod_legacy.js', 'file');
  }
}

/**
 * Implements hook_node_view().
 */
function sp_learningmod_node_view($node, $view_mode, $langcode) {
  /*dpm($node, 'node');*/
  // Call global user variable.
  global $user;
  // Load full user account object.
  $account = user_load($user->uid);
  $uid = $account->uid;
  /*dpm($account);*/

  $type = is_string($node) ? $node : $node->type;
  if ($type == 'sp_analyze_interview' || $type == 'sp_analyze_other_research' || $type == 'sp_analyze_report' || $type == 'sp_article') {

    if ($type == 'sp_article') {
      if (isset($node->field_type_of_sp_article[LANGUAGE_NONE][0]['tid'])) {
        $sp_art_tid = $node->field_type_of_sp_article[LANGUAGE_NONE][0]['tid'];
        $sptermload = taxonomy_term_load($sp_art_tid);
        $sp_art_type = $sptermload->name;
        /*dpm($sp_art_type, 'SP_Learningmod article type');*/
      }
      elseif (isset($node->field_type_of_sp_article[LANGUAGE_NONE][0]['target_id'])) {
        $sp_art_tid = $node->field_type_of_sp_article[LANGUAGE_NONE][0]['target_id'];
        $sptermload = taxonomy_term_load($sp_art_tid);
        $sp_art_type = $sptermload->name;
        /*dpm($sp_art_type, 'SP_Learningmod article type');*/
      }
    }

    // Set learningsp_budget field as variable;.
    $budget = field_get_items('user', $account, 'field_learnsp_budget');
    // Set budget value as integer variable.
    $budgetval = (int) $budget[0]['value'];
    // Get current nid.
    $nid = $node->nid;
    // If not an sp_article page.
    if ($type !== 'sp_article') {
      // Get budget value of current page.
      $page_value = $node->field_sp_budget_value[LANGUAGE_NONE][0]['value'];

      /* Check for revealed responses and add them to user account */
      // Load user responses list.
      $user_responses_list = field_get_items('user', $account, 'field_learnsp_responses_revealed');
      // Set variable for associated responses on the node with ternary if-
      // statement that accounts for when variable is not set yet.
      isset($node->field_sp_associated_responses[LANGUAGE_NONE]) ? $node_responses_list = $node->field_sp_associated_responses[LANGUAGE_NONE] : $node_responses_list = $node->field_sp_associated_responses;

      // What to do if the user_responses_list is blank.
      if ($user_responses_list == FALSE) {
        // Create $response_nid array.
        $node_responses_nids = array_column($node_responses_list, 'target_id');
        // Run a loop of all nids in the node_responses_nids array.
        foreach ($node_responses_nids as $nnid) {
          // Add the nid to the user profile.
          $account->field_learnsp_responses_revealed[LANGUAGE_NONE][]['target_id'] = $nnid;
          // Save user account.
          $account = user_save($account);
        }
      }
      // What to do if the node_responses_list is blank.
      elseif ($node_responses_list !== FALSE) {
        // Load revealed responses list from user account.
        $user_responses_list = field_get_items('user', $account, 'field_learnsp_responses_revealed');
        $user_responses_nids = array_column($user_responses_list, 'target_id');
        // Create $response_nid array.
        $node_responses_nids = array_column($node_responses_list, 'target_id');
        // Run a loop of all nids in the node_responses_nids array.
        foreach ($node_responses_nids as $nnid) {
          // If the nid isn't in the user_responses_nids array.
          if (!in_array($nnid, $user_responses_nids)) {
            // Add the nid to the user profile.
            $account->field_learnsp_responses_revealed[LANGUAGE_NONE][]['target_id'] = $nnid;
          }
          // Save user account.
          $account = user_save($account);
        }
      }
    }
    // What to do if none of the other conditions apply.
    else {
      // Set page_value to null on sp_article nodes.
      $page_value = NULL;
    }

    // Get array of Street Prostitution nodes the current user has visited.
    $visited_list = field_get_items('user', $account, 'field_learnsp_pages_analyze');
    // Get an array of values from the node_list multidimensional array.
    isset($account->field_learnsp_pages_analyze[LANGUAGE_NONE]) ? $visited_list_nids = array_column($visited_list, 'target_id') : $visited_list_nids = $account->field_learnsp_pages_analyze;

    // See if current node is NOT in the node_list_values array.
    if (!in_array($node->nid, $visited_list_nids)) {
      // If it isn't in the array, update the budget according to page_value.
      $updatebudget = (int) $page_value + $budgetval;
    }
    elseif ($budgetval > 0) {
      // If it isn't in the array, update the budget according to page_value.
      $updatebudget = $budgetval;
    }
    $pageuri = $_SERVER['REQUEST_URI'];
    if (($type == 'sp_article' && $sp_art_type != 'Intro' && $sp_art_type != 'Feedback' && $sp_art_type != 'Create Plan' && $pageuri !== '/learning/prostitution/you-are-fired') || $type == 'sp_analyze_interview' || $type == 'sp_analyze_other_research' || $type == 'sp_analyze_report') {
      // Show a message with updated budget value.
      drupal_set_message(
        t('<div>Analyze the Problem</div>
          <div><span><strong>Budget spent:</strong></span><span style="display: inline-block; width: 85%; margin-left: 8px;" class="field field-name-field-basic-text-text field-type-text-long field-label-hidden">
            <div class="field-items">
                <div class="field-item even">
                    <div class="w3-light-grey">
                        <div id="myBar" class="w3-container w3-green w3-center" style="width:0%">0%
                        </div>
                    </div>
                </div>
                <script>
                jQuery(document).ready(function move() {
                        var elem = document.getElementById("myBar");
                        var width = 0;
                        var id = setInterval(frame, 10);

                        function frame() {
                            if (width >= @budget) {
                                clearInterval(id);
                            } else {
                                width++;
                                elem.style.width = width + "%";
                                elem.innerHTML = "<strong>" + width * 1 + "%" + "</strong>";
                            }
                            if (width >= 80 && width <= 100) {
                                elem.classList.remove("w3-green");
                                elem.classList.add("orange");
                            }
                            if (width > 100) {
                                elem.classList.remove("orange");
                                elem.classList.add("red");
                            }
                        }
                    });
                </script>
            </div></span>
          </div>
        ', array('@budget' => $updatebudget)), 'warning', FALSE);
    }
    if ($budgetval !== $updatebudget) {
      // Update learnsp_budget field on user account.
      $account->field_learnsp_budget[LANGUAGE_NONE]['0']['value'] = $updatebudget;
      // Add page to learnsp_pages field on user profile.
      $account->field_learnsp_pages_analyze[LANGUAGE_NONE][]['target_id'] = $node->nid;

      // Save user account.
      $account = user_save($account);
    }
    $warnuri = '/learning/prostitution/warning';
    $firstwarnfield = isset($account->field_learnsp_firstwarn[LANGUAGE_NONE][0]['value']) ? $account->field_learnsp_firstwarn[LANGUAGE_NONE][0]['value'] : 0;
    $finalwarnfield = isset($account->field_learnsp_finalwarn[LANGUAGE_NONE][0]['value']) ? $account->field_learnsp_finalwarn[LANGUAGE_NONE][0]['value'] : 0;
    $fireduri = '/learning/prostitution/you-are-fired';
    $finwarnuri = '/learning/prostitution/final-warning';

    if (($budgetval > 90 || $updatebudget > 90) && ($pageuri !== $warnuri) && $firstwarnfield == 0) {
      $account->field_learnsp_firstwarn[LANGUAGE_NONE][0]['value'] = 1;
      $account = user_save($account);
      drupal_goto('/learning/prostitution/warning');

    }
    if (($budgetval > 110 || $updatebudget > 110) && ($pageuri !== $finwarnuri) && $finalwarnfield == 0) {
      $account->field_learnsp_finalwarn[LANGUAGE_NONE][0]['value'] = 1;
      $account = user_save($account);
      drupal_goto('/learning/prostitution/final-warning');
    }
    if (($budgetval > 120 || $updatebudget > 120) && ($pageuri !== $fireduri)) {
      unset($_SESSION['messages']);
      $cq_types = array(
        'sp_cq_police_community_members',
        'sp_cq_street_prostitutes',
        'sp_cq_clients_johns',
        'sp_cq_pimps',
        'sp_cq_sexual_transactions',
        'sp_cq_environment',
        'sp_cq_drugs',
        'sp_cq_current_response',
      );
      // Query database table for critical question button entries.
      try {
        $querys = db_select('sp_critq_visited', 's')
          ->fields('s')
          ->condition('uid', $account->uid)
          ->execute();

        if ($querys->rowCount()) {
          // Delete entry from {'sp_critq_visited'} table for selected user.
          $queryd = db_delete('sp_critq_visited')->condition('uid', $account->uid)->execute();
          // Query database for all Critical Questions nodes created by user.
          try {
            $results = db_select('node', 'n')
              ->fields('n')
              ->condition('n.type', $cq_types, 'IN')
              ->condition('uid', $account->uid)
              ->execute();
            foreach ($results as $result) {
              $nids[] = $result->nid;
            }
            if (!empty($nids)) {
              // Delete all Critical Questions nodes created by the user.
              node_delete_multiple($nids);
            }
          }
          catch (Exception $e) {
            watchdog('sp_learningmod', 'node_delete_multiple failed. Message = %message, query= %query',
              array('%message' => $e->getMessage(), '%query' => $e->query_string), WATCHDOG_ERROR);
          }
        }
      }
      catch (Exception $e) {
        watchdog('sp_learningmod', 'db_delete failed on "sp_critq_visited." Message = %message, query= %query',
          array('%message' => $e->getMessage(), '%query' => $e->query_string), WATCHDOG_ERROR);
      }

      // Reset learnSP_analyze_budget.
      $account->field_learnsp_budget[LANGUAGE_NONE][0]['value'] = 0;
      // Reset learnsp_quiz_status.
      $account->field_learnsp_quiz_status[LANGUAGE_NONE][0]['value'] = NULL;
      // Reset learnsp_quiz_score.
      $account->field_learnsp_quiz_score[LANGUAGE_NONE][0]['value'] = 0;
      // Reset learnsp_submitted.
      $account->field_learnsp_submitted[LANGUAGE_NONE][0]['value'] = 'no';
      // Reset learnsp_pages_analyze.
      $account->field_learnsp_pages_analyze[LANGUAGE_NONE] = array();
      // Reset learnsp_responses_revealed.
      $account->field_learnsp_responses_revealed[LANGUAGE_NONE] = array();
      // Reset learnsp_plan_resp_plan_choices.
      $account->field_learnsp_plan_choices[LANGUAGE_NONE] = array();
      // Reset first warning.
      $account->field_learnsp_firstwarn[LANGUAGE_NONE][0]['value'] = 0;
      // Reset final warning.
      $account->field_learnsp_finalwarn[LANGUAGE_NONE][0]['value'] = 0;
      // Save user account.
      $account = user_save($account);

      drupal_set_message(t("Your Street Prostitution Learning Module account has been reset."), 'error');
      // Set redirect location.
      drupal_goto('/learning/prostitution/you-are-fired');
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Disables the learnsp_budget and learnsp_pages fields on the user profile.
 */
function sp_learningmod_form_alter(&$form, &$form_state, $form_id) {
  /*dpm($form, 'form');*/
  /*dpm($form_state, 'form_state');*/
  if ($form_id == 'user_profile_form') {
    // $form['field_learnsp_budget']['#disabled'] = TRUE;
    // $form['field_learnsp_pages']['#disabled'] = TRUE;
  }

  if ($form_id == 'sp_cq_police_community_members_node_form' || $form_id == 'sp_cq_street_prostitutes_node_form' || $form_id == 'sp_cq_clients_johns_node_form' || $form_id == 'sp_cq_pimps_node_form' || $form_id == 'sp_cq_sexual_transactions_node_form' || $form_id == 'sp_cq_environment_node_form' || $form_id == 'sp_cq_drugs_node_form' || $form_id == 'sp_cq_current_response_node_form') {
    // Call global user variable.
    global $user;
    // Load full user account object.
    $account = user_load($user->uid);
    // Get username.
    $username = $account->name;
    // Get formname value.
    $formname = $form['field_formname'][LANGUAGE_NONE][0]['value']['#default_value'];
    $created = (int) $form['created']['#value'];
    $changed = (int) $form['changed']['#default_value'];
    // Set username as node title.
    if ($created <= $changed || $changed == 0) {
      $form['title']['#default_value'] = $username . ": " . $formname;
    }
    // Disable title field.
    $form['title']['#attributes']['disabled'] = TRUE;
    // Restrict access to unnecessary node metafields.
    $form['title']['#access'] = FALSE;
    $form['path']['#access'] = FALSE;
    $form['revision_information']['#access'] = FALSE;
    $form['revision_information']['revision']['#access'] = FALSE;
    $form['revision_information']['log']['#access'] = FALSE;
    $form['author']['#access'] = FALSE;
    $form['actions']['draft']['#access'] = FALSE;
    $form['actions']['delete']['#access'] = FALSE;
    $form['redirect']['#access'] = FALSE;
    // Change button text to 'submit'.
    $form['actions']['submit']['#value'] = 'Submit';
    // Disable and hide formname field.
    $form['field_formname']['#disabled'] = TRUE;
    $form['field_formname']['#type'] = 'hidden';

    $form['actions']['submit']['#submit'][] = 'critq_submit';
  }
}

/**
 * Implements hook_submit().
 */
function critq_submit($form, &$form_state) {
  global $user;
  // Load full user account object.
  $account = user_load($user->uid);
  $nid = $form_state['values']['nid'];

  $forms = array(
    'sp_cq_police_community_members_node_form' => 'pol_comm_nid',
    'sp_cq_street_prostitutes_node_form' => 'streetp_nid',
    'sp_cq_clients_johns_node_form' => 'clients_nid',
    'sp_cq_pimps_node_form' => 'pimps_nid',
    'sp_cq_sexual_transactions_node_form' => 'transact_nid',
    'sp_cq_environment_node_form' => 'env_nid',
    'sp_cq_drugs_node_form' => 'drugs_nid',
    'sp_cq_current_response_node_form' => 'curr_resp_nid',
  );
  $formid = array($form_state['input']['form_id'] => NULL);
  $match = array_values(array_intersect_key($forms, $formid));
  $column = $match[0];
  try {
    db_merge('sp_critq_visited')
      ->key(array('uid' => $account->uid))
      ->fields(array(
        'uid' => $account->uid,
        'name' => $account->name,
        $column => $form_state['values']['nid'],
      )
      )->execute();
  }
  catch (Exception $e) {
    watchdog('sp_learningmod', 'db_merge failed. Message = %message, query= %query',
      array('%message' => $e->getMessage(), '%query' => $e->query_string), WATCHDOG_ERROR);
  }

  // Redirect form submission to the Critical Questions page.
  $form_state['redirect'] = '/learning/prostitution/critical-questions-worksheets';

  // Suppress default drupal message normally shown on node creation
  // Define array of messages you want to remove using their first few words.
  $message_removal = array(
    "SP CQ",
    "Image resize threshold",
  );

  // Remove all of the messages that match your conditions.
  if (isset($_SESSION['messages'])) {
    foreach ($_SESSION['messages'] as $status => $message_array) {
      foreach ($_SESSION['messages'][$status] as $key => $value) {
        foreach ($message_removal as $message) {
          if (strpos($value, $message) === 0) {
            unset($_SESSION['messages'][$status][$key]);
          }
        }
      }

      // Clean up the $_SESSION array to prevent empty
      // messages from printing to screen.
      if (empty($_SESSION['messages'][$status])) {
        unset($_SESSION['messages'][$status]);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function sp_learningmod_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['panels_pane__block__sp_learningmod_respmemo'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'panels-pane--block--sp-learningmod-respmemo',
    'path' => drupal_get_path('module', 'sp_learningmod') . '/templates',
  );
  $theme['page__admin__config__sp_learningmod'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'page--admin--config--sp-learningmod',
    'path' => drupal_get_path('module', 'sp_learningmod') . '/templates',
  );
  return $theme;
}

/**
 * Implements hook_node_access().
 */
function sp_learningmod_node_access($node, $op, $account) {
  // Call global user variable.
  global $user;
  // Load full user account object.
  $account = user_load($user->uid);

  $type = is_string($node) ? $node : $node->type;
  if ($op == 'view' && $type == 'sp_article' && isset($node->field_type_of_sp_article[LANGUAGE_NONE][0]['tid'])) {
    $sp_art_tid = $node->field_type_of_sp_article[LANGUAGE_NONE][0]['tid'];
    $sptermload = taxonomy_term_load($sp_art_tid);
    $sp_art_type = $sptermload->name;
    $sp_submitted = isset($account->field_learnsp_submitted['und'][0]['value']) ? $account->field_learnsp_submitted['und'][0]['value'] : 'no';

      if ($type == 'sp_article' && $sp_art_type == 'Feedback' && $sp_submitted === 'yes') {
        return NODE_ACCESS_ALLOW;
      }
      elseif ($type == 'sp_article' && $sp_art_type == 'Feedback' && $sp_submitted !== 'yes') {
        return NODE_ACCESS_DENY;
      }
      else {
        return NODE_ACCESS_IGNORE;
      }
  }
}

/**
 * Implements hook_form_formID_alter().
 */
function sp_learningmod_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  $form['#prefix'] = t('<p class="small">If you already have an account <strong>and are not affiliated with ASU</strong>, please log in with the form below. ASU affiliates should log in via "SIGN IN" link at the top right of the page.</p>');
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * This will unset unwanted tabs.
 */
function sp_learningmod_menu_local_tasks_alter(&$data) {
  $node = menu_get_object();
  $nodetypes = array(
    'sp_cq_police_community_members',
    'sp_cq_street_prostitutes',
    'sp_cq_clients_johns',
    'sp_cq_pimps',
    'sp_cq_sexual_transactions',
    'sp_cq_environment',
    'sp_cq_drugs',
    'sp_cq_current_response',
  );
  if (!empty($node) && in_array($node->type, $nodetypes)) {
    foreach ($data['tabs'][0]['output'] as $key => $value) {
      if ($value['#link']['path'] == 'node/%/view') {
        unset($data['tabs'][0]['output'][$key]);
      }
    }
  }
}
